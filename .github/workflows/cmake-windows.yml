# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: dir ${{github.workspace}}
      # cmake -S llvm-project\llvm -B llvm-project\llvm\build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} "-DLLVM_ENABLE_PROJECTS=clang;mlir" -DLLVM_INSTALL_UTILS=ON -DLLVM_INCLUDE_TESTS=OFF "-DLLVM_TARGETS_TO_BUILD=NVPTX;AMDGPU"

    - name: Build LLVM
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}\llvm-project\llvm\build --config ${{env.BUILD_TYPE}}

